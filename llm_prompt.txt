You are an expert in React and React Testing Library.
Your task is to refactor the provided Jest test file to adhere to React Testing Library best practices, specifically addressing the ESLint errors related to `prefer-screen-queries`, `no-container`, and `no-node-access`.

Here are the ESLint errors:
C:\Users\defir\Documents\fun_with_Copilot\Kiro vibes\src\components\__tests__\ToastError.test.tsx
  23:12  error  Avoid destructuring queries from `render` result, use `screen.queryByText` instead                   testing-library/prefer-screen-queries
  30:12  error  Avoid using container methods. Prefer using the methods from Testing Library, such as "getByRole()"  testing-library/no-container
  30:22  error  Avoid direct Node access. Prefer using the methods from Testing Library                              testing-library/no-node-access
  39:12  error  Avoid destructuring queries from `render` result, use `screen.getByText` instead                     testing-library/prefer-screen-queries
  48:21  error  Avoid destructuring queries from `render` result, use `screen.getByLabelText` instead                testing-library/prefer-screen-queries

Here is the content of the file `src/components/__tests__/ToastError.test.tsx`:
```typescript
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import ToastError from '../ToastError';

describe('ToastError', () => {
  const mockOnDismiss = jest.fn();

  beforeEach(() => {
    jest.useFakeTimers();
    mockOnDismiss.mockClear();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  it('does not render when error is null or undefined', () => {
    // Test with null - should render nothing
    const { queryByText } = render(
      <ToastError error={null} onDismiss={mockOnDismiss} />
    );

    expect(queryByText(/This is an error message/i)).not.toBeInTheDocument();

    // For undefined case, we need to check the component doesn't exist in DOM
    const { container } = render(
      <ToastError error={undefined} onDismiss={mockOnDismiss} />
    );

    expect(container.querySelector('.toast-error')).toBeNull();
  });

  it('renders correctly when an error message is provided', () => {
    const errorMessage = 'This is an error message';
    const { getByText } = render(
      <ToastError error={errorMessage} onDismiss={mockOnDismiss} />
    );

    expect(getByText(errorMessage)).toBeInTheDocument();
  });

  it('calls onDismiss when the dismiss button is clicked', () => {
    const errorMessage = 'Test error message';
    const { getByLabelText } = render(
      <ToastError error={errorMessage} onDismiss={mockOnDismiss} />
    );

    fireEvent.click(getByLabelText('Close notification'));

    expect(mockOnDismiss).toHaveBeenCalledTimes(1);
  });

  it('calls onDismiss after 8 seconds when an error is present', () => {
    const errorMessage = 'Test error message';
    render(<ToastError error={errorMessage} onDismiss={mockOnDismiss} />);

    jest.runAllTimers();

    expect(mockOnDismiss).toHaveBeenCalledTimes(1);
  });
});
```

Refactor the file to fix all the reported ESLint errors. Ensure the tests remain functional and continue to assert the correct behavior. Do not add any comments or explanations, just provide the updated code.
