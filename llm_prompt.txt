You are a senior software engineer. Your task is to analyze a failing test suite for a React component and propose a fix.

The project uses React, TypeScript, Jest, and React Testing Library.

Here's the problem:
A test file `src/components/ui/__tests__/withErrorBoundary.test.tsx` is failing. The failures indicate issues with rendering the wrapped component and the fallback UI, and incorrect prop passing to the internal ErrorBoundary component.

Specifically, the errors are:
1.  `TestingLibraryElementError: Unable to find an element with the text: Working Component.`
    *   **Root Cause:** The `withErrorBoundary` HOC is currently defined to take `errorBoundaryProps` as a second argument to the HOC function, but the tests are passing `ErrorBoundary` related props directly to the component returned by the HOC. Consequently, the `WithErrorBoundaryComponent` is not correctly identifying and passing the `fallback` prop to the `ErrorBoundary`, and the `WrappedComponent` is not rendering as expected because the HOC's prop handling is misaligned with the test's prop passing.
2.  `TestingLibraryElementError: Unable to find an element with the text: Fallback UI.`
    *   **Root Cause:** Similar to the first issue, the `fallback` prop, which is intended for the `ErrorBoundary`, is being passed as a prop to the component returned by `withErrorBoundary`, but the HOC's current implementation does not correctly extract and forward this prop to the `ErrorBoundary` component.
3.  `expect(MockErrorBoundary).toHaveBeenCalledWith(...)` mismatch, showing that the `children` prop passed to `MockErrorBoundary` contains unexpected props (like `fallback` and `onReset`) that should belong to the `ErrorBoundary` itself, not the wrapped component.
    *   **Root Cause:** The `WithErrorBoundaryComponent` is currently spreading *all* received props (`props: P`) directly onto the `WrappedComponent` (`<WrappedComponent {...props} />`). This means that props intended for the `ErrorBoundary` (e.g., `fallback`, `onReset`) are incorrectly being passed down to the `WrappedComponent`, leading to them appearing as part of the `children` prop of `MockErrorBoundary` in the test's assertion.

Your task is to:
1.  Provide a single, unified code change for `src/components/ui/withErrorBoundary.tsx` that addresses all identified issues. The `withErrorBoundary` HOC should be modified to accept `ErrorBoundary` specific props (like `fallback` and `onReset`) as direct props to the component it returns. These props should then be destructured and passed to the internal `ErrorBoundary` component, while all other props are correctly passed to the `WrappedComponent`.
2.  The test file `src/components/ui/__tests__/withErrorBoundary.test.tsx` does not need changes, as its assertions are correct for the desired behavior after the `withErrorBoundary.tsx` fix.

Do not provide any explanation or commit messages. Just provide the code changes in the following format:

```filepath
// code changes
```

If no changes are needed for a file, omit that file.
